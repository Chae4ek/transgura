package chae4ek.transgura.third_party.ldtk;

import com.fasterxml.jackson.annotation.*;

public class LayerInstance {
  private int cHei;
  private int cWid;
  private int gridSize;
  private String identifier;
  private double opacity;
  private int pxTotalOffsetX;
  private int pxTotalOffsetY;
  private Integer tilesetDefUid;
  private String tilesetRelPath;
  private String type;
  private TileInstance[] autoLayerTiles;
  private EntityInstance[] entityInstances;
  private TileInstance[] gridTiles;
  private String iid;
  private IntGridValueInstance[] intGrid;
  private int[] intGridCsv;
  private int layerDefUid;
  private int levelId;
  private int[] optionalRules;
  private Integer overrideTilesetUid;
  private int pxOffsetX;
  private int pxOffsetY;
  private int seed;
  private boolean visible;

  /** Grid-based height */
  @JsonProperty("__cHei")
  public int getCHei() {
    return cHei;
  }

  @JsonProperty("__cHei")
  public void setCHei(final int value) {
    cHei = value;
  }

  /** Grid-based width */
  @JsonProperty("__cWid")
  public int getCWid() {
    return cWid;
  }

  @JsonProperty("__cWid")
  public void setCWid(final int value) {
    cWid = value;
  }

  /** Grid size */
  @JsonProperty("__gridSize")
  public int getGridSize() {
    return gridSize;
  }

  @JsonProperty("__gridSize")
  public void setGridSize(final int value) {
    gridSize = value;
  }

  /** Layer definition identifier */
  @JsonProperty("__identifier")
  public String getIdentifier() {
    return identifier;
  }

  @JsonProperty("__identifier")
  public void setIdentifier(final String value) {
    identifier = value;
  }

  /** Layer opacity as Float [0-1] */
  @JsonProperty("__opacity")
  public double getOpacity() {
    return opacity;
  }

  @JsonProperty("__opacity")
  public void setOpacity(final double value) {
    opacity = value;
  }

  /** Total layer X pixel offset, including both instance and definition offsets. */
  @JsonProperty("__pxTotalOffsetX")
  public int getPxTotalOffsetX() {
    return pxTotalOffsetX;
  }

  @JsonProperty("__pxTotalOffsetX")
  public void setPxTotalOffsetX(final int value) {
    pxTotalOffsetX = value;
  }

  /** Total layer Y pixel offset, including both instance and definition offsets. */
  @JsonProperty("__pxTotalOffsetY")
  public int getPxTotalOffsetY() {
    return pxTotalOffsetY;
  }

  @JsonProperty("__pxTotalOffsetY")
  public void setPxTotalOffsetY(final int value) {
    pxTotalOffsetY = value;
  }

  /** The definition UID of corresponding Tileset, if any. */
  @JsonProperty("__tilesetDefUid")
  public Integer getTilesetDefUid() {
    return tilesetDefUid;
  }

  @JsonProperty("__tilesetDefUid")
  public void setTilesetDefUid(final Integer value) {
    tilesetDefUid = value;
  }

  /** The relative path to corresponding Tileset, if any. */
  @JsonProperty("__tilesetRelPath")
  public String getTilesetRelPath() {
    return tilesetRelPath;
  }

  @JsonProperty("__tilesetRelPath")
  public void setTilesetRelPath(final String value) {
    tilesetRelPath = value;
  }

  /** Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer) */
  @JsonProperty("__type")
  public String getType() {
    return type;
  }

  @JsonProperty("__type")
  public void setType(final String value) {
    type = value;
  }

  /**
   * An array containing all tiles generated by Auto-layer rules. The array is already sorted in
   * display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).<br>
   * <br>
   * Note: if multiple tiles are stacked in the same cell as the result of different rules, all
   * tiles behind opaque ones will be discarded.
   */
  @JsonProperty("autoLayerTiles")
  public TileInstance[] getAutoLayerTiles() {
    return autoLayerTiles;
  }

  @JsonProperty("autoLayerTiles")
  public void setAutoLayerTiles(final TileInstance[] value) {
    autoLayerTiles = value;
  }

  @JsonProperty("entityInstances")
  public EntityInstance[] getEntityInstances() {
    return entityInstances;
  }

  @JsonProperty("entityInstances")
  public void setEntityInstances(final EntityInstance[] value) {
    entityInstances = value;
  }

  @JsonProperty("gridTiles")
  public TileInstance[] getGridTiles() {
    return gridTiles;
  }

  @JsonProperty("gridTiles")
  public void setGridTiles(final TileInstance[] value) {
    gridTiles = value;
  }

  /** Unique layer instance identifier */
  @JsonProperty("iid")
  public String getIid() {
    return iid;
  }

  @JsonProperty("iid")
  public void setIid(final String value) {
    iid = value;
  }

  /**
   * **WARNING**: this deprecated value is no longer exported since version 1.0.0 Replaced by:
   * `intGridCsv`
   */
  @JsonProperty("intGrid")
  public IntGridValueInstance[] getIntGrid() {
    return intGrid;
  }

  @JsonProperty("intGrid")
  public void setIntGrid(final IntGridValueInstance[] value) {
    intGrid = value;
  }

  /**
   * A list of all values in the IntGrid layer, stored in CSV format (Comma Separated Values).<br>
   * Order is from left to right, and top to bottom (ie. first row from left to right, followed by
   * second row, etc).<br>
   * `0` means "empty cell" and IntGrid values start at 1.<br>
   * The array size is `__cWid` x `__cHei` cells.
   */
  @JsonProperty("intGridCsv")
  public int[] getIntGridCsv() {
    return intGridCsv;
  }

  @JsonProperty("intGridCsv")
  public void setIntGridCsv(final int[] value) {
    intGridCsv = value;
  }

  /** Reference the Layer definition UID */
  @JsonProperty("layerDefUid")
  public int getLayerDefUid() {
    return layerDefUid;
  }

  @JsonProperty("layerDefUid")
  public void setLayerDefUid(final int value) {
    layerDefUid = value;
  }

  /** Reference to the UID of the level containing this layer instance */
  @JsonProperty("levelId")
  public int getLevelId() {
    return levelId;
  }

  @JsonProperty("levelId")
  public void setLevelId(final int value) {
    levelId = value;
  }

  /**
   * An Array containing the UIDs of optional rules that were enabled in this specific layer
   * instance.
   */
  @JsonProperty("optionalRules")
  public int[] getOptionalRules() {
    return optionalRules;
  }

  @JsonProperty("optionalRules")
  public void setOptionalRules(final int[] value) {
    optionalRules = value;
  }

  /** This layer can use another tileset by overriding the tileset UID here. */
  @JsonProperty("overrideTilesetUid")
  public Integer getOverrideTilesetUid() {
    return overrideTilesetUid;
  }

  @JsonProperty("overrideTilesetUid")
  public void setOverrideTilesetUid(final Integer value) {
    overrideTilesetUid = value;
  }

  /**
   * X offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the
   * `LayerDef` optional offset, so you should probably prefer using `__pxTotalOffsetX` which
   * contains the total offset value)
   */
  @JsonProperty("pxOffsetX")
  public int getPxOffsetX() {
    return pxOffsetX;
  }

  @JsonProperty("pxOffsetX")
  public void setPxOffsetX(final int value) {
    pxOffsetX = value;
  }

  /**
   * Y offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the
   * `LayerDef` optional offset, so you should probably prefer using `__pxTotalOffsetX` which
   * contains the total offset value)
   */
  @JsonProperty("pxOffsetY")
  public int getPxOffsetY() {
    return pxOffsetY;
  }

  @JsonProperty("pxOffsetY")
  public void setPxOffsetY(final int value) {
    pxOffsetY = value;
  }

  /** Random seed used for Auto-Layers rendering */
  @JsonProperty("seed")
  public int getSeed() {
    return seed;
  }

  @JsonProperty("seed")
  public void setSeed(final int value) {
    seed = value;
  }

  /** Layer instance visibility */
  @JsonProperty("visible")
  public boolean getVisible() {
    return visible;
  }

  @JsonProperty("visible")
  public void setVisible(final boolean value) {
    visible = value;
  }
}
